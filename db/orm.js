require('dotenv').config();
const mongo = require('./mongo.js');
const Sequelize = require('sequelize');
<<<<<<< HEAD
let db = new Sequelize('kuyikSQL',
  process.env.SQL_USERNAME,
  process.env.SEQUELIZE_PASSWORD,
=======
let db = new Sequelize('kuyikSQL', 
  process.env.SQL_USERNAME, 
  process.env.SQL_PASSWORD, 
>>>>>>> 47a3cb04e66fb3f2bca653ebea629c567edaf2db
  {
    host: process.env.SQL_HOST,
    dialect: 'mysql'
  }
);

// check if the connection is working

db.authenticate()
  .then(() => {
    console.log('Connection has been established successfully.');
    console.log('Host: ', process.env.SQL_HOST);
  })
  .catch(err => {
    console.error('Unable to connect to the database:', err);
  });


// define our tables (foreign keys come later)

const Users = db.define('Users', {
  id: {
    type: Sequelize.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  username: Sequelize.STRING,
  email: Sequelize.STRING,
  about_me: Sequelize.TEXT, // eslint-disable-line camelcase
  pic: Sequelize.STRING
});

const Locations = db.define('Locations', {
  id: {
    type: Sequelize.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  location: Sequelize.STRING
});

const Sessions = db.define('Sessions', {
  id: {
    type: Sequelize.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  // commented-out field b/c generated by associations below
  // id_users: Sequelize.INTEGER, // eslint-disable-line camelcase
  hash: Sequelize.STRING
});

const Posts = db.define('Posts', {
  id: {
    type: Sequelize.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  // commented-out fields b/c generated by associations below
  // id_users: Sequelize.INTEGER, // eslint-disable-line camelcase
  // id_locations: Sequelize.INTEGER, // eslint-disable-line camelcase
  title: Sequelize.STRING,
  subtitle: Sequelize.STRING,
  pics: Sequelize.STRING,
  id_mongo_text: Sequelize.INTEGER, // eslint-disable-line camelcase
});


// create foreign keys in our tables via sequelize "associations"

Posts.belongsTo(Users, {foreignKey: 'id_users'});
Users.hasMany(Posts, {foreignKey: 'id_users'});

Posts.belongsTo(Locations, {foreignKey: 'id_locations'});
Locations.hasMany(Posts, {foreignKey: 'id_locations'});

Sessions.belongsTo(Users, {foreignKey: 'id_users'});


searchFrontPosts = () => {
  return Posts.findAll();
  // TO DO
  // Add limit and filter once decided, such as 
  // top 20 most recent posts or top 10 liked posts
};

searchAllPosts = (query) => {
  return Posts.findAll({
    // include: [
    //   { title: query, required: true }
    // ]
    include: [{ // this performs joins
      model: Users
    }, {
      model: Locations
    }]
  }) // this commented code won't work for some reason...
  // .then(posts => {
  //   posts.forEach(post => {
  //     post.author = post.User.username;
  //     post.location = post.Location.location;
  //   });
  //   return posts;
  // });
    .then(posts => {
      return posts.map(post => {
        let cleanPost = {
          id: post.id,
          title: post.title,
          subtitle: post.subtitle,
          author: post.User.username,
          location: post.Location.location,
          pics: post.pics,
          id_mongo_text: post.id_mongo_text // eslint-disable-line camelcase
        };
        return cleanPost;
      });
    });
};

// Get the main post text from mongo for
// each of the posts retrieved from sql

getMongoTextsForSqlResults = sqlResults => {
  let ids = sqlResults.map(post => post['id_mongo_text']);
  let mongoTexts = ids.map(id => {
    return mongo.Post.findOne({id: id}, 
      {text: 1, _id: 0}); // find *text* but don't include _id
  });
  return Promise.all(mongoTexts);  
};

// Combine the mongo and sql results so that 
// we can send one object to the client

addMongoTextsToSqlResults = (sqlPosts, mongoTexts) => {
  for (let i = 0; i < sqlPosts.length; i++) {
    sqlPosts[i].text = mongoTexts[i].text;
  }
  return sqlPosts;
};

module.exports.db = db;
module.exports.Posts = Posts;
module.exports.Locations = Locations;
module.exports.Users = Users;
module.exports.Sessions = Sessions;
module.exports.searchAllPosts = searchAllPosts;
module.exports.searchFrontPosts = searchFrontPosts;
module.exports.getMongoTextsForSqlResults = getMongoTextsForSqlResults;
module.exports.addMongoTextsToSqlResults = addMongoTextsToSqlResults;
